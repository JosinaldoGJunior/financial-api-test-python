name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Permite push (usado no commit-main)
      pages: write     # Permite deploy para GitHub Pages
      id-token: write  # Para segurança (opcional)

    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      API_LOGIN_URL: ${{ secrets.API_LOGIN_URL }}
      API_EMAIL: ${{ secrets.API_EMAIL }}
      API_PASSWORD: ${{ secrets.API_PASSWORD }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt allure-pytest

      # Step 4: Install Allure CLI
      - name: Install Allure CLI
        run: |
          sudo mkdir -p /opt/allure
          curl -Lo allure.tgz https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.18.1/allure-commandline-2.18.1.tgz
          sudo tar -zxvf allure.tgz -C /opt/allure --strip-components=1
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
          allure --version

      # Step 5: Run tests (sem tratamento redundante de erro)
      - name: Run tests
        run: pytest --maxfail=3 --disable-warnings --alluredir=allure-results

      # Step 6: Generate Allure report
      - name: Generate Allure Report
        if: always()  # Gera relatório mesmo se os testes falharem
        run: |
          allure generate allure-results --clean -o allure-report

      # Step 7: Publish report to gh-pages
      - name: Deploy to GitHub Pages
        if: always()  # Publica o relatório mesmo se os testes falharem
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report

      # Step 8: Upload code changes (somente se os testes passarem)
      - name: Upload code changes
        if: success()  # Só executa se o job for bem-sucedido
        uses: actions/upload-artifact@v4
        with:
          name: code-changes
          path: |
            *
            !allure-report

  commit-main:
    needs: test-and-report  # Só executa se test-and-report for bem-sucedido
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download code changes
        uses: actions/download-artifact@v4
        with:
          name: code-changes
          path: code-changes

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          clean: false

      - name: Commit to main
        if: success()  # Verificação extra para garantir que só execute se o test-and-report passar
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Copia os arquivos (ignora erros)
          cp -r code-changes/* . >/dev/null 2>&1 || true
          
          # Verifica se há alterações para commitar
          if git diff --quiet; then
            echo "✅ Nenhuma alteração para commitar."
          else
            git add .
            git reset allure-report/
            git commit -m "Update main branch after successful tests [skip ci]"  # Adicione [skip ci] para evitar loops
            git push origin main
          fi